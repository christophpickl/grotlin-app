import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

// good tutorial: http://rominirani.com/2014/08/15/gradle-tutorial-part-5-gradle-app-engine-plugin/

def versionAppEngine = "1.9.17"
def versionKotlin = "0.9.976"
def buildDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())

buildscript {
    ext.kotlin_version = '0.9.976'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.google.appengine:gradle-appengine-plugin:1.9.17"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // why not global working?!
    }
}
// https://github.com/GoogleCloudPlatform/gradle-appengine-plugin

// apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'kotlin'
// NO!!! apply plugin: 'kotlin-android'
apply plugin: 'appengine' // https://github.com/GoogleCloudPlatform/gradle-appengine-plugin

sourceCompatibility = 1.7
targetCompatibility = 1.7

// http://java.dzone.com/articles/resource-filtering-gradle

//for Ant filter
// TODO MINOR build thingy: WARNING [Project: :app] variant.getProcessResources() is deprecated. Call it on one of variant.getOutputs() instead.
processResources {
    filter ReplaceTokens, tokens: [
            "artifact.version": project.property("version"),
            "build.date"      : buildDate
    ]
}


configurations {
    provided
}

sourceSets {
    main { compileClasspath += configurations.provided }
    main.java.srcDirs += 'src/main/kotlin'
}

dependencies {
    compile project(':logic')

    compile "org.jetbrains.kotlin:kotlin-stdlib:$versionKotlin"

    // GOOGLE APP ENGINE
    // =============================================
    appengineSdk "com.google.appengine:appengine-java-sdk:${versionAppEngine}"
    compile "com.google.appengine:appengine-api-1.0-sdk:${versionAppEngine}"
//    compile "com.google.appengine:appengine-endpoints:${versionAppEngine}"
    // easy access persistence service for GAE's datastore
    compile 'com.googlecode.objectify:objectify:5.1.1'

    // REST EASY
    // =============================================
    def versionRestEasy = '3.0.10.Final'
    // http://repository.jboss.org/nexus/content/groups/public
    // https://github.com/szymex/Embedded-Jetty-RESTEasy-Guice-Example
    // https://github.com/resteasy/Resteasy/tree/master/jaxrs/examples/guice-hello
    compile "org.jboss.resteasy:resteasy-guice:$versionRestEasy"
    compile 'javax.inject:javax.inject:1'
    compile 'com.google.inject:guice:3.0'
    // http://howtodoinjava.com/2013/05/10/resteasy-jackson-json-example/
    compile 'org.jboss.resteasy:resteasy-jackson-provider:3.0.4.Final'
//    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.4.3'
    compile 'javax.servlet:servlet-api:2.5'

    // http://howtodoinjava.com/2013/05/30/resteasy-bean-validation-using-hibernate-validator-provider/
    // use provider-11 ... https://issues.jboss.org/browse/RESTEASY-1056
// TODO removed it again as of a GAE bug :(    compile "org.jboss.resteasy:resteasy-validator-provider-11:$versionRestEasy"

//    compile "org.jboss.resteasy:resteasy-hibernatevalidator-provider:$versionRestEasy"

    // LOGGING
    // =============================================

    def versionSlf4j = '1.7.9'
    compile "org.slf4j:slf4j-api:$versionSlf4j"
// FIXME this makes appengineRun hang during build :( compile "org.slf4j:jul-to-slf4j:$versionSlf4j"
    compile "ch.qos.logback:logback-core:1.1.2"
    compile "ch.qos.logback:logback-classic:1.1.2"

    // TEST
    // =============================================
    // test dependency doesnt work on travis-ci :( see logic build.gradle
//    testCompile project(path: ':logic', configuration: 'testOutput')
//    testCompile fileTree(dir: '../logic/build/libs', include: ['*.jar'])  // HACK IT!

    // testng, hamcrest, mockito... already via :logic ... or, maybe its not the case...
    testCompile 'org.testng:testng:6.8.8'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.10.8'
    // testCompile 'org.mockito:mockito-all:1.10.8' ???

    testCompile "com.google.appengine:appengine-testing:${versionAppEngine}"
    testCompile "com.google.appengine:appengine-api-stubs:${versionAppEngine}"

    // functionalTestCompile "foo.bar"
}

//configurations.testCompile.each {
//    println "testCompile: $it"
//}
//configurations.testRuntime.each {
//    println "testRuntime: $it"
//}

appengine {
    downloadSdk = true
    // via this it's possible to access it via its LAN IP address (rather localhost)
    httpAddress = "localhost"
//    httpAddress = "0.0.0.0"
    httpPort = 8888

    jvmFlags = ['-DappDebug=true']
//    jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000']

    appcfg {
        email = "christoph.pickl@gmail.com"
        noCookies = true
        oauth2 = true
    }
}

test {
    useTestNG({
        excludeGroups 'WebTest'
    })
    // jvmArgs += [ "-XX:MaxPermSize=256m" ]
}

// http://stackoverflow.com/questions/21009125/including-not-excluding-groups-in-testng-and-gradle
task testWeb(type: Test) {
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
    useTestNG() {
//        excludeGroups 'WebTest'
        parallel 'classes'
        threadCount 4
    }
    reports.junitXml.destination = file("${reporting.baseDir}/webtest")
    reports.html.destination = file("${reporting.baseDir}/webtest")
}


apply plugin: "jacoco"
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}
task testReport(dependsOn: ["test", "jacocoTestReport"]) {}

//appengineFunctionalTest {
//    systemProperty "myFunctionalTestProperty", "yipiiiii"
//}